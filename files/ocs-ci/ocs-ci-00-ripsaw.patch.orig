diff --git a/ocs_ci/ocs/constants.py b/ocs_ci/ocs/constants.py
index b71db7c6..91077f1c 100644
--- a/ocs_ci/ocs/constants.py
+++ b/ocs_ci/ocs/constants.py
@@ -32,6 +32,7 @@ TEMPLATE_CSI_FS_DIR = os.path.join(TEMPLATE_CSI_DIR, "cephfs")
 TEMPLATE_PV_PVC_DIR = os.path.join(TEMPLATE_DIR, "pv_pvc")
 TEMPLATE_APP_POD_DIR = os.path.join(TEMPLATE_DIR, "app-pods")
 TEMPLATE_WORKLOAD_DIR = os.path.join(TEMPLATE_DIR, "workloads")
+TEMPLATE_BENCHMARK_OPERATOR_DIR = os.path.join(TEMPLATE_DIR, "benchmark-operator")
 TEMPLATE_FIO_DIR = os.path.join(TEMPLATE_WORKLOAD_DIR, "fio")
 TEMPLATE_SMALLFILE_DIR = os.path.join(TEMPLATE_WORKLOAD_DIR, "smallfile")
 TEMPLATE_PGSQL_DIR = os.path.join(TEMPLATE_WORKLOAD_DIR, "pgsql")
diff --git a/ocs_ci/ocs/elasticsearch.py b/ocs_ci/ocs/elasticsearch.py
index 311d0a69..a9bf43e7 100644
--- a/ocs_ci/ocs/elasticsearch.py
+++ b/ocs_ci/ocs/elasticsearch.py
@@ -15,6 +15,7 @@ from ocs_ci.ocs.ocp import OCP
 from ocs_ci.ocs.utils import get_pod_name_by_pattern
 from ocs_ci.utility.utils import TimeoutSampler
 from ocs_ci.helpers.performance_lib import run_command
+from ocs_ci.framework import config
 
 log = logging.getLogger(__name__)
 
@@ -22,6 +23,7 @@ log = logging.getLogger(__name__)
 es_log = logging.getLogger("elasticsearch")
 es_log.setLevel(logging.CRITICAL)
 
+disable_es = config.ENV_DATA.get("disable_es_ripsaw", False)
 
 def elasticsearch_load(connection, target_path):
     """
@@ -105,6 +107,12 @@ class ElasticSearch(object):
         Initializer function
 
         """
+
+        if disable_es:
+            log.info("Disable the use of in-cluster elastic-search for benchmark-operator tests")
+            self.es = None
+            return
+
         log.info("Initializing the Elastic-Search environment object")
         self.namespace = "elastic-system"
         self.eck_file = "ocs_ci/templates/app-pods/eck.1.3.1-all-in-one.yaml"
@@ -198,6 +206,8 @@ class ElasticSearch(object):
             str : String that represent the Ip Address.
 
         """
+        if self.es is None:
+            return ""
         return self.es.get()["spec"]["clusterIP"]
 
     def get_port(self):
@@ -208,6 +218,8 @@ class ElasticSearch(object):
             str : String that represent the port.
 
         """
+        if self.es is None:
+            return ""
         return self.es.get()["spec"]["ports"][0]["port"]
 
     def _deploy_es(self):
@@ -264,6 +276,10 @@ class ElasticSearch(object):
         port forwarding process.
 
         """
+        if self.es is None:
+            log.info("Teardown the Elasticsearch environment complete - ES was disabled")
+            return
+
         log.info("Teardown the Elasticsearch environment")
         log.info("Deleting all resources")
         log.info("Deleting the dumper client pod")
diff --git a/ocs_ci/ocs/perfresult.py b/ocs_ci/ocs/perfresult.py
index 23b34d5e..25db8e4c 100644
--- a/ocs_ci/ocs/perfresult.py
+++ b/ocs_ci/ocs/perfresult.py
@@ -30,9 +30,12 @@ class PerfResult:
 
         self.uuid = uuid
 
+        self.enable_es = "elasticsearch" in crd["spec"]
+
         # Initialize the Elastic-search server parameters
-        self.server = crd["spec"]["elasticsearch"]["server"]
-        self.port = crd["spec"]["elasticsearch"]["port"]
+        if self.enable_es:
+            self.server = crd["spec"]["elasticsearch"]["server"]
+            self.port = crd["spec"]["elasticsearch"]["port"]
         self.index = None  # place holder for the ES index name
         self.new_index = None  # place holder for the ES full result index name
         self.all_results = {}
@@ -51,18 +54,14 @@ class PerfResult:
         # Creating the connection to the elastic-search
         log.info(f"Connecting to ES {self.server} on port {self.port}")
         try:
-            self.es = Elasticsearch([{"host": self.server, "port": self.port}])
+            if self.enable_es:
+                self.es = Elasticsearch([{"host": self.server, "port": self.port}])
+                self.es.ping()
         except ESExp.ConnectionError:
             log.warning(
                 "Cannot connect to ES server {}:{}".format(self.server, self.port)
             )
 
-        # Testing the connection to the elastic-search
-        if not self.es.ping():
-            log.warning(
-                "Cannot connect to ES server {}:{}".format(self.server, self.port)
-            )
-
     def es_read(self):
         """
         Reading all test results from the elastic-search server
@@ -76,6 +75,7 @@ class PerfResult:
         """
 
         query = {"query": {"match": {"uuid": self.uuid}}}
+        log.info(f"Reading from ES server query {query}")
         results = self.es.search(index=self.index, body=query)
         assert results["hits"]["hits"], "Results not found in Elasticsearch"
         return results["hits"]["hits"]
@@ -94,6 +94,7 @@ class PerfResult:
             return False
 
         log.info(f"Writing all data to ES server {self.es}")
+        log.info(f"Writing all results to ES server {self.all_results}")
         self.add_key("all_results", self.all_results)
         log.debug(
             f"Params : index={self.new_index}, "
diff --git a/ocs_ci/ocs/ripsaw.py b/ocs_ci/ocs/ripsaw.py
index d1bf325b..ee006484 100644
--- a/ocs_ci/ocs/ripsaw.py
+++ b/ocs_ci/ocs/ripsaw.py
@@ -41,9 +41,9 @@ class RipSaw(object):
         """
         self.args = kwargs
         self.repo = self.args.get(
-            "repo", "https://github.com/cloud-bulldozer/benchmark-operator"
+            "repo", "https://github.com/ocp-power-automation/benchmark-operator"
         )
-        self.branch = self.args.get("branch", "master")
+        self.branch = self.args.get("branch", "dev-ppc64le")
         self.namespace = self.args.get("namespace", RIPSAW_NAMESPACE)
         self.pgsql_is_setup = False
         self.ocp = OCP()
diff --git a/ocs_ci/templates/workloads/fio/benchmark_fio.yaml b/ocs_ci/templates/workloads/fio/benchmark_fio.yaml
index 3284fede..fba188c5 100644
--- a/ocs_ci/templates/workloads/fio/benchmark_fio.yaml
+++ b/ocs_ci/templates/workloads/fio/benchmark_fio.yaml
@@ -4,14 +4,12 @@ metadata:
   name: fio-benchmark
   namespace: my-ripsaw
 spec:
-  elasticsearch:
-    server: 10.0.78.167
-    port: 9200
   clustername: env_ocpversion_ocsversion
   test_user: interface_iopattern
   workload:
     name: "fio_distributed"
     args:
+      image: quay.io/piyushgupta1551/fio-m:ppc64le
       prefill: true
       samples: 3
       servers: 50
diff --git a/ocs_ci/templates/workloads/fio/benchmark_fio_cmp.yaml b/ocs_ci/templates/workloads/fio/benchmark_fio_cmp.yaml
index 08148411..08a9cdb3 100644
--- a/ocs_ci/templates/workloads/fio/benchmark_fio_cmp.yaml
+++ b/ocs_ci/templates/workloads/fio/benchmark_fio_cmp.yaml
@@ -4,15 +4,12 @@ metadata:
   name: fio-benchmark
   namespace: my-ripsaw
 spec:
-  elasticsearch:
-    server: 10.0.78.167
-    port: 9200
-    parallel: true
   clustername: test
   test_user: "Homer Simpson"
   workload:
     name: "fio_distributed"
     args:
+      image: quay.io/piyushgupta1551/fio-m:ppc64le
       prefill: true
       prefill_bs: 64KiB
       samples: 3
diff --git a/ocs_ci/templates/workloads/pgsql/PGSQL_Benchmark.yaml b/ocs_ci/templates/workloads/pgsql/PGSQL_Benchmark.yaml
index 1c121d4b..f22fdef1 100644
--- a/ocs_ci/templates/workloads/pgsql/PGSQL_Benchmark.yaml
+++ b/ocs_ci/templates/workloads/pgsql/PGSQL_Benchmark.yaml
@@ -7,6 +7,7 @@ spec:
   workload:
     name: "pgbench"
     args:
+      image: quay.io/piyushgupta1551/fio-m:ppc64le
       timeout: 5
       clients:
         - 20
diff --git a/tests/e2e/performance/test_fio_benchmark.py b/tests/e2e/performance/test_fio_benchmark.py
index 81ad266a..707162b3 100644
--- a/tests/e2e/performance/test_fio_benchmark.py
+++ b/tests/e2e/performance/test_fio_benchmark.py
@@ -78,6 +78,7 @@ class FIOResultsAnalyse(PerfResult):
         self.full_log_path = full_log_path
         # make sure we have connection to the elastic search server
         self.es = es_con
+        log.info("FIOResultsAnalyze __init__ full_log_path: {self.full_log_path}")
 
     def read_results_from_file(self):
         """
@@ -85,7 +86,7 @@ class FIOResultsAnalyse(PerfResult):
 
         """
         file_name = f"{self.full_log_path}/results/{self.index}.data.json"
-        log.info(f"Reading the {self.index} data from the file")
+        log.info(f"Reading the {self.index} data from the file {file_name}")
         full_data = []
         with open(file_name) as json_file:
             while True:
@@ -218,18 +219,16 @@ class TestFIOBenchmark(E2ETest):
             if not self.main_es.ping():
                 log.warning("Cannot connect to Main elasticsearch server")
                 self.main_es = None
-
+            else:
+                # Use the internal define elastic-search server in the test - if exist
+                self.fio_cr["spec"]["elasticsearch"] = {
+                    "server": elasticsearch.get_ip(),
+                    "port": elasticsearch.get_port(),
+                    "url": f"http://{elasticsearch.get_ip()}:{elasticsearch.get_port()}",
+                }
         else:
             log.warning("Elastic Search information does not exists in YAML file")
-            self.fio_cr["spec"]["elasticsearch"] = {}
-
-        # Use the internal define elastic-search server in the test - if exist
-        if elasticsearch:
-            self.fio_cr["spec"]["elasticsearch"] = {
-                "server": elasticsearch.get_ip(),
-                "port": elasticsearch.get_port(),
-                "url": f"http://{elasticsearch.get_ip()}:{elasticsearch.get_port()}",
-            }
+            self.main_es = None
 
     def setting_storage_usage(self):
         """
@@ -528,8 +527,10 @@ class TestFIOBenchmark(E2ETest):
 
         # Getting the UUID from inside the benchmark pod
         uuid = ripsaw.get_uuid(fio_client_pod)
+
         # Setting back the original elastic-search information
-        self.fio_cr["spec"]["elasticsearch"] = self.backup_es
+        if "elasticsearch" in self.fio_cr["spec"]:
+            self.fio_cr["spec"]["elasticsearch"] = self.backup_es
 
         # Initialize the results doc file.
         full_results = self.init_full_results(
@@ -542,12 +543,15 @@ class TestFIOBenchmark(E2ETest):
         end_time = self.wait_for_wl_to_finish(fio_client_pod)
         full_results.add_key("test_time", {"start": self.start_time, "end": end_time})
 
+        log.info("before cleanup")
         # Clean up fio benchmark
         self.cleanup()
 
+        log.info("before copy_es_data")
         log.debug(f"Full results is : {full_results.results}")
         self.copy_es_data(es)
 
+        log.info("before analyze results")
         full_results.analyze_results()  # Analyze the results
 
         # Writing the analyzed test results to the Elastic-Search server
@@ -621,8 +625,10 @@ class TestFIOBenchmark(E2ETest):
 
         # Getting the UUID from inside the benchmark pod
         uuid = ripsaw.get_uuid(fio_client_pod)
+
         # Setting back the original elastic-search information
-        self.fio_cr["spec"]["elasticsearch"] = self.backup_es
+        if "elasticsearch" in self.fio_cr["spec"]:
+            self.fio_cr["spec"]["elasticsearch"] = self.backup_es
 
         # Initialize the results doc file.
         full_results = self.init_full_results(
